Version=5.8
NumberOfModules=1
Module1=Starter
Build1=Default,b4a.example
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="5" android:targetSdkVersion="19"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~AddActivityText(main, <intent-filter>~\n~        <action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" />~\n~    </intent-filter>~\n~	<meta-data android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"~\n~        android:resource="@xml/device_filter" />)~\n~
IconFile=
NumberOfFiles=12
File1=dseg77seggchan-regular.ttf
File2=DSEG7Classic-Bold.ttf
File3=DSEG7Classic-BoldItalic.ttf
File4=DSEG7Classic-Italic.ttf
File5=DSEG7Classic-Light.ttf
File6=DSEG7Classic-LightItalic.ttf
File7=dseg7classic-regular.ttf
File8=dseg7classic-regularitalic.ttf
File9=dseg7seggchanmini-regular.ttf
File10=dseg7seggchan-regular.ttf
File11=HoneyLogo1.jpg
File12=Main_Layout.bal
NumberOfLibraries=5
Library1=core
Library2=usbserial
Library3=byteconverter
Library4=randomaccessfile
Library5=stringutils
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: B4A Example
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: landscape
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: false
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Dim conv As ByteConverter
	Dim usb As UsbSerial
	Dim astreams As AsyncStreams
		Dim mensaje_Out As String
	
	'Declare font variables
'Dim DSEG7Clasic_Bold As Typeface
'DSEG7Clasic_Bold = Typeface.LoadFromAssets("arial.ttf")
End Sub

Sub Globals
	'Dim information(2) As String 
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	Private Timer_1, Timer_2, Timer_3, Timer_4, Timer_5, Timer_6, Timer_7, Timer_8, Timer_9, Timer_10, Timer_11, Timer_12, Timer_13, Timer_14 As Label
	Private Timer_15, Timer_16, Timer_17, Timer_18, Timer_19, Timer_20, Timer_21, Timer_22 As Label
	Private RadioButton3_6S, RadioButton36S As RadioButton
	Dim Time_To_Check_Radio_Button, Time_To_Check_Radio_Button2 As Double
	Private Timers(22) As Label 
	Dim Last_Msg As String
	
	
	
	
	Timers(0) = Timer_1
	Timers(1) = Timer_2
	Timers(2) = Timer_3
	Timers(3) = Timer_4
	Timers(4) = Timer_5
	Timers(5) = Timer_6
	Timers(6) = Timer_7
	Timers(7) = Timer_8
	Timers(8) = Timer_9
	Timers(9) = Timer_10
	Timers(10) = Timer_11
	
	
	Timers(11) = Timer_12
	Timers(12) = Timer_13
	Timers(13) = Timer_14
	Timers(14) = Timer_15
	Timers(15) = Timer_16
	Timers(16) = Timer_17
	Timers(17) = Timer_18
	Timers(18) = Timer_19
	Timers(19) = Timer_20
	Timers(20) = Timer_21
	Timers(21) = Timer_22
	
	Dim ID_arr(23) As String
	ID_arr(0) = "a"
	ID_arr(1) = "b"
	ID_arr(2) = "c"
	ID_arr(3) = "d"
	ID_arr(4) = "e"
	ID_arr(5) = "f"
	ID_arr(6) = "g"
	ID_arr(7) = "h"
	ID_arr(8) = "i"
	ID_arr(9) = "j"
	ID_arr(10) = "k"
	ID_arr(11) = "l"
	
	
	ID_arr(12) = "m"
	ID_arr(13) = "n"
	ID_arr(14) = "o"
	ID_arr(15) = "p"
	ID_arr(16) = "q"
	ID_arr(17) = "r"
	ID_arr(18) = "s"
	ID_arr(19) = "t"
	ID_arr(20) = "u"
	ID_arr(21) = "v"
	ID_arr(22) = "z"
	Dim Contador_Is_Finished(22) As Int
	

	
	
	Dim EditText1 As EditText

	

End Sub

Sub Activity_Create(FirstTime As Boolean)

''==APPLY TO ALL LABELS, EDITTEXTS, BUTTONS, CHECKBOXES, RADIOBUTTONS AND TOGGLEBUTTONS
'For Each v As View In Activity.GetAllViewsRecursive
'  If v Is Label Then
'    Dim lbl As Label = v
'    lbl.Typeface = DSEG7Clasic_Bold
'  End If
'Next

	'Do not forget to load the layout file created with the visual designer. For example:
	Activity.LoadLayout("Main_Layout")
	Timers = Array As Label(Timer_1, Timer_2, Timer_3, Timer_4, Timer_5, Timer_6, Timer_7, Timer_8, Timer_9, Timer_10, Timer_11, Timer_12, Timer_13, Timer_14, Timer_15, Timer_16, Timer_17, Timer_18, Timer_19, Timer_20, Timer_21, Timer_22)
	Contador_Is_Finished = Array As Int (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
	'Timers(0).Initialize("Timers")
	
	'information(0) = usb.DeviceInfo(1)
	'information(1) = usb.DeviceInfo(2)
	Time_To_Check_Radio_Button = 3.6
	Time_To_Check_Radio_Button2 = 3.6
	If (usb.HasPermission(1)) Then	' Ver_2.
		
		
		'Msgbox(usb1.DeviceInfo(1), "Device Information 1")	' Ver_2.4
		Dim dev As Int
		'dev = usb.Open(115200, 1)		' Ver_2.4
		dev = usb.Open(115200, 1)		' Ver_2.4
		''Msgbox(usb.UsbPresent(1),"AS")	'
	
		If dev <> usb.USB_NONE Then	
			 astreams.Initialize(usb.GetInputStream,usb.GetOutputStream,"Astreams")
		Else
			Log("Error opening USB port 1")
		End If
	Else
		usb.RequestPermission(1)  ' Ver_2.4
	End If

End Sub

Sub Write_In_Arduino (Ms As String)
	Ms = mensaje_Out
	astreams.Write(Ms.GetBytes("UTF8"))
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub


Sub Label_Click
	Dim lbl_tag As Label
	lbl_tag = Sender
	lbl_tag.Text = lbl_tag.Tag
End Sub


Sub Button1_Click
	
	mensaje_Out="a"
	Write_In_Arduino(mensaje_Out)
End Sub
Sub Astreams_NewData (Buffer() As Byte)
	Dim command As String
	Dim Pos_Box As Int
	Dim bandera As Boolean
	Dim l As Label 
	Dim i,j As Int
	
	''Se convierte la informacion recibida a UTF8
	command =conv.StringFromBytes(Buffer, "UTF8")
	For i = 0 To 21 
		'Contiene algun ID valido?
		If command.Contains(ID_arr(i)) = True Then 
			'El ID concuerda con el tag?
			If Timers(i).tag = ID_arr(i) Then 
				'Si el ID concuerda con el Tag, es el mismo contenido que tenia antes?
				'Msgbox(command.IndexOf(ID_arr(i)),"999")
				'Msgbox(command.IndexOf(ID_arr(i+1)),"999")
				If command.IndexOf(ID_arr(i)) > 0 Or command.IndexOf(ID_arr(i)) = 0 Then 
				Try
					Dim val As Double 
					Dim string_Div As String 
					'If (ID_arr(i) <> "v") Then 
						val = command.SubString2(command.IndexOf(ID_arr(i))+1,command.IndexOf(ID_arr(i+1)))
					'Else 
						'val = command.SubString(command.IndexOf(ID_arr(i))+1)	
					'End If
					
					string_Div =  (val / 10)
					Last_Msg = NumberFormat2(string_Div,3,1,1,False) & " 5EG"
					
				If Timers(i).Text <> Last_Msg Then 
					If ((string_Div > 0.0) And (string_Div < 0.5)) Then 
						
						Timers(i).Color = 0xFF474147
					End If
				'If Timers(i).Text <> Last_Msg Then 
					'Si no se repite el contenido, el texto del label sera el valor que se recibió
					' Se toma el valor del index donde aparece el ID hasta donde aparece el siguiente ID
					'Ej: a129b199, se tomaria el 129 unicamente. 
					Contador_Is_Finished(i) = 0
						Try
							''BUG CON EL ULTIMO VALOR NO SE MOSTRARIA NADA PORQUE SE INTENTA PASAR A LA SIGUIENTE POSICION DEL ARRAY ID_ARR
							'NO HAY NADA DESPUES DE V
						Timers(i).Text = NumberFormat2(string_Div,3,1,1,False) & " 5EG"
							
						Catch
							Log(LastException)
						End Try
				Else 
					'Si se repite el contenido con lo que se recibió, se aumente un 1 al contador
					'para asegurarse de que no fue un error en el buffer
					Contador_Is_Finished(i) = Contador_Is_Finished(i) + 1
					'si se repite varias veces el mismo mensaje, se toma como proceso terminado
				 	If Contador_Is_Finished(i) > 2 Then 
						'Se evalua si el valor del timer es el requerido
						Contador_Is_Finished(i) = 0
						'Grupo 1
						Dim Time_To_Check As Double = Timers(i).Text.SubString2(0, Timers(i).Text.IndexOf(" "))
						If i > 10 Then 
							If  (((Time_To_Check = Time_To_Check_Radio_Button2) Or (Time_To_Check > Time_To_Check_Radio_Button2)) And (Time_To_Check < (Time_To_Check_Radio_Button2 + (Time_To_Check_Radio_Button2 * 0.1 )) Or Time_To_Check = (Time_To_Check_Radio_Button2 + (Time_To_Check_Radio_Button2 * 0.1 )))       )Then 
								Try
									Timers(i).Color = Colors.Green
								Catch
									Log(LastException)
								End Try
							
							Else 	
								Try
									Timers(i).Color = Colors.Red
								Catch
									Log(LastException)
								End Try
							
						End If	
						
						Else 
							'Dim Time_To_Check As Double = Timers(i).Text.SubString2(0, Timers(i).Text.IndexOf(" "))
							If  (((Time_To_Check = Time_To_Check_Radio_Button) Or (Time_To_Check > Time_To_Check_Radio_Button)) And (Time_To_Check < (Time_To_Check_Radio_Button + (Time_To_Check_Radio_Button * 0.1 )) Or Time_To_Check = (Time_To_Check_Radio_Button + (Time_To_Check_Radio_Button * 0.1 )))       )Then 
								Try
									Timers(i).Color = Colors.Green
								Catch
									Log(LastException)
								End Try
							
							Else 	
								Try
									Timers(i).Color = Colors.Red
								Catch
									Log(LastException)
								End Try
							
						End If	
						End If 
							
							
					End If 
				End If 
				Catch
					 Log(LastException)
				End Try
				End If
				
			End If
		End If	
	Next

End Sub

Sub RadioButton3_6S_CheckedChange(Checked As Boolean)
	If Checked = True Then 
		Time_To_Check_Radio_Button = 3.6
	End If
End Sub
Sub RadioButton36S_CheckedChange(Checked As Boolean)
	If Checked = True Then 
		Time_To_Check_Radio_Button = 36
	End If
End Sub



Sub RadioButton36S2_CheckedChange(Checked As Boolean)
	If Checked = True Then 
		Time_To_Check_Radio_Button2 = 36
	End If
End Sub

Sub RadioButton3_6S2_CheckedChange(Checked As Boolean)
	If Checked = True Then 
		Time_To_Check_Radio_Button2 = 3.6
	End If	
End Sub